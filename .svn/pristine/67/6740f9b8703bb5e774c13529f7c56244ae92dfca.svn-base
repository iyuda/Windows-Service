using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using MySql.Data.MySqlClient;
using System.Text;
using System.Configuration;
using System.Globalization;
using System.Reflection;
using System.Data;
using System.Net;
using System.IO;
using System.Diagnostics;
using System.Windows.Forms;
using Newtonsoft.Json.Linq;
using System.ServiceProcess;
using CemsMobilePcrSrv;
using System.Threading;
using System.Net.Http;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace CemsMobilePcrSrv
{
    class WindowsService : ServiceBase
    {
        static string base_url;
        static string post_from_couch_url;
        static bool TimerActive = false;
        public async  static Task<string> GetContentfromResponse(HttpResponseMessage response_msg)
        {
            Stream result=response_msg.Content.ReadAsStreamAsync().Result;
          //  Stream theStream = await response_msg.Content.ReadAsStreamAsync();
            Task<string> getStringTask = response_msg.Content.ReadAsStringAsync();
            string urlContents = await getStringTask;
            return urlContents;
            //string responseBody = await response_msg.Content.ReadAsStringAsync();
            //byte[] buffer = new byte[result.Length];
            //result.Read(buffer, 0, (int)result.Length);
            //return buffer.ToString();
        }
        public static HttpResponseMessage UrlRequest(string url, out string content, string method = "POST", string content_type = "application/json", string data = null)
        {
            try {
                Logger.LogActivity("UrlRequest for: " + url + " method: " +method);
                HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(url);
                webRequest.Method = method;
                webRequest.ContentType = content_type;
                // Stream requestStream = webRequest.GetRequestStream();
                if (data != null)
                {
                    byte[] byteArray = Encoding.UTF8.GetBytes(data);
                    using (Stream dataStream = webRequest.GetRequestStream())
                    {
                        dataStream.Write(byteArray, 0, byteArray.Length);
                    }
                }
                System.Diagnostics.Stopwatch timer = new Stopwatch();
                timer.Start();
                WebResponse response = webRequest.GetResponse();
                timer.Stop();
                
                Logger.LogActivity(method + " elapsed time: " + timer.Elapsed, "CouchStatus");
                //webRequest.CookieContainer = cookieContainer;
                StreamReader reader = new StreamReader(response.GetResponseStream());
                string responseFromServer= reader.ReadToEnd();
                HttpResponseMessage response_msg = new HttpResponseMessage(HttpStatusCode.OK);
                response_msg.Content = new StringContent(responseFromServer, Encoding.UTF8, "application/json");
                content = responseFromServer;
                //var content = ((System.Net.Http.StringContent)response_msg.Content).Value; // await response_msg.Content.ReadAsStringAsync(); 

                return response_msg;
            }
            catch (WebException ex) { 
                Logger.LogException(ex);
                HttpResponseMessage response_msg = new HttpResponseMessage(HttpStatusCode.InternalServerError);
                response_msg.Content = new StringContent(ex.Message, Encoding.UTF8, "application/json");
                content=ex.Message;
                return response_msg;
            }
            catch (Exception ex) { Logger.LogException(ex); throw ex; }
        }



        public static string GetPcrReport(string pcr_id, string FaxNumber, string Agency)
        {
            try
            {
                string url = WindowsService.config.GetProfileEntry("Settings", "Web API URL", "http://localhost:85/api/Couch/");
                url += "GetPcrReport?pcr_id=" + pcr_id + "&FaxNumber=" + FaxNumber + "&Agency=" + Agency;
                string response = "";
                HttpResponseMessage status= UrlRequest(url, out response, "GET");
               
                //string OnlinePath = @"http://localhost/cemslocal/yiicems/index.php?r=Central/Report&pcrid=" + pcr_id + "&autoload=true";
                //string ReportUrl = string.Format(OnlinePath + "&btnfax=1");


                //string FileName = "PcrReport_" + pcr_id + ".pdf";

                //CreateFax CreateFax = new CreateFax();
                //string DestFile = CreateFax.CreateFile(pcr_id, ReportUrl);
                //string status = "";
                //if (!String.IsNullOrEmpty(DestFile))
                //    status = CreateFax.sendEmailFax(DestFile, FaxNumber, Agency);
                //else
                //    status = " Error Creating PDF File";
                if (status.StatusCode == HttpStatusCode.OK)
                    return "OK";
                else
                    return url + ":  " + JsonConvert.SerializeObject(JsonConvert.DeserializeObject(response)); 
            }
            
            catch (Exception ex) { Logger.LogException(ex); return ex.Message; }

        }

         public static string ImportPcr(string id, string rev)
        {
            try
            {
                string CouchUrl = config.GetProfileEntry("Settings", "CouchUrl", "http://192.168.1.60:5984/app-pcr/") + id;
                string couch_content;
                string response_string;
                HttpResponseMessage response = UrlRequest(CouchUrl, out couch_content, "GET");

                //Task<string> content = GetContentfromResponse(response);
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    //Logger.LogActivity("ImportPcr Breakpoint 1", "Breakpoints");
                    string PostFromCouchUrl = config.GetProfileEntry("Settings", "PostFromCouchUrl", "http://creativeemstest.com/cemslocal/yiicems/index.php?r=api/CouchDB/PostPcrFromCouch");
                    string php_content = "";
                    //Logger.LogActivity("ImportPcr Breakpoint 2", "Breakpoints");
                    UrlRequest(PostFromCouchUrl, out php_content, "POST", data: couch_content);
                    //Logger.LogActivity("ImportPcr Breakpoint 3", "Breakpoints");
                    object success = JsonMaker.GetIOSJsonExtract("$.success", php_content) ?? "";
                    //Logger.LogActivity("ImportPcr Breakpoint 4", "Breakpoints");
                    bool bool_value = false;
                    Boolean.TryParse(success.ToString(), out bool_value);
                    //Logger.LogActivity("ImportPcr Breakpoint 5", "Breakpoints");
                    if (bool_value)
                    {
                        //Logger.LogActivity("ImportPcr Breakpoint 6", "Breakpoints");
                        string pcr_status = (JsonMaker.GetIOSJsonExtract("$.pcr_status", couch_content) ?? "").ToString();
                        switch (pcr_status)
                        {
                            case "inactive":
                            case "sync_pending":
                            case "faxed":
                                //Logger.LogActivity("ImportPcr Breakpoint 7", "Breakpoints");
                                JsonMaker.UpdateJsonValue("$.pcr_status", "deleted", ref couch_content);
                                UrlRequest(CouchUrl, out response_string, "PUT", data: couch_content);
                                //UrlRequest(CouchUrl + "?rev=" + rev, out response_string, "DELETE");
                                Logger.LogActivity(CouchUrl + "?rev=" + rev + " PUT Response: " + response_string);
                                break;
                            default:
                                //Logger.LogActivity("ImportPcr Breakpoint 8", "Breakpoints");
                                string pcr_id = (JsonMaker.GetIOSJsonExtract("$.pcr_id", couch_content) ?? "").ToString();
                                if (String.IsNullOrEmpty(pcr_id))
                                {
                                    //Logger.LogActivity("ImportPcr Breakpoint 9", "Breakpoints");
                                    pcr_id = (JsonMaker.GetIOSJsonExtract("$.pcr_id", php_content) ?? "").ToString();
                                }
                                if (!String.IsNullOrEmpty(pcr_id))
                                {
                                    if (pcr_status== "fax_pending") {
                                        string fax_number = (JsonMaker.GetIOSJsonExtract("$.fax.number", couch_content) ?? "").ToString();
                                        string agency_name = (JsonMaker.GetIOSJsonExtract("$.fax.name", couch_content) ?? "").ToString();
                                        string status = "";
                                        if (!String.IsNullOrEmpty(fax_number))
                                            status = GetPcrReport(pcr_id, fax_number, agency_name);
                                        else
                                            status = "Fax number is empty";
                                        JsonMaker.UpdateJsonValue("$.pcr_status", status == "OK" ?"faxed":"fax_error", ref couch_content);
                                        if (status!="OK")
                                            JsonMaker.UpdateJsonValue("$.fax.error_message", status, ref couch_content);
                                    }
                                    JsonMaker.UpdateJsonValue("$.pcr_id", pcr_id, ref couch_content);
                                    UrlRequest(CouchUrl, out response_string, "PUT", data: couch_content);
                                    Logger.LogActivity(CouchUrl + " PUT Response: " + response_string);
                                }
                                break;
                        }
                    }
                    else
                    {
                        JsonMaker.UpdateJsonValue("$.pcr_status", "sync_error", ref couch_content);
                        JsonMaker.UpdateJsonValue("$.sync_error", php_content, ref couch_content);
                        UrlRequest(CouchUrl, out response_string, "PUT", data: couch_content);
                    }
                    Logger.LogActivity("ImportPcr Breakpoint 13", "Breakpoints");
                    return PostFromCouchUrl + ":  " + php_content;
                }
                else
                {
                    Logger.LogActivity("ImportPcr Breakpoint 14", "Breakpoints");
                    return CouchUrl + ":  " + JsonConvert.SerializeObject(JsonConvert.DeserializeObject(couch_content));
                    Logger.LogActivity("ImportPcr Breakpoint 15", "Breakpoints");
                }
            }
            catch (WebException ex) { Logger.LogException(ex); return ex.Message; }
            catch (Exception ex) { Logger.LogException(ex); return ex.Message; }
        }
        public static string ImportPcr_old(string id)
        {
            try
            {
                
                //string url = post_from_couch_url + "/_changes" + (LastSeq == "" ? "" : "?since=" + LastSeq);
                //        string Json1 = UrlRequest(post_from_couch_url,method:"POST", data:);
                string url = WindowsService.config.GetProfileEntry("Settings", "Web API URL", "http://localhost:85/api/Couch/");
                url += "ImportPcr?id=" + id;
                HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(url);
                webRequest.Method = "GET";

                System.Diagnostics.Stopwatch timer = new Stopwatch();
                timer.Start();
                WebResponse response = webRequest.GetResponse();
                timer.Stop();
                StreamReader reader = new StreamReader(response.GetResponseStream());
                string ResponseString = reader.ReadToEnd();
                Logger.LogActivity(url + ":" + System.Environment.NewLine + "GET elapsed time: " + timer.Elapsed + System.Environment.NewLine + response + ":" + ResponseString, "CouchStatus");
                return ResponseString;// ((HttpWebResponse)response).StatusDescription;

            }
            catch (WebException ex) { Logger.LogException(ex); return ex.Response.ResponseUri.ToString() + ":  " + ex.Message; }
            catch (Exception ex) { Logger.LogException(ex); return ex.Message; }
        }

        public static string CheckRevisions(string LastSeq)
        {
            try
            {
                string url = base_url + "/_changes" + (LastSeq == "" ? "" : "?since=" + LastSeq);
                string content;
                HttpResponseMessage response = UrlRequest(url, out content, "GET");
                //Task<string> content = GetContentfromResponse(response);
                string Json1 = content;


                //url = base_url + "?since=" + NewSeqNo;
                //string Json2 = UrlRequest(url, "POST", "application/json");

                var SeqArray = (IEnumerable<JToken>)JsonMaker.GetIOSJsonExtract("$.results", Json1);
                if (SeqArray != null)
                {
                    foreach (JToken SeqToken in SeqArray)
                    {
                        
                        int CurrentSeqNo;
                        string strSeq = JsonMaker.GetIOSJsonExtract("$.seq", SeqToken).ToString();
                        int.TryParse(strSeq.Split('-')[0], out CurrentSeqNo);
                        Logger.LogActivity("CheckRevisions Breakpoint " + CurrentSeqNo.ToString(), "Breakpoints");
                        //if (CurrentSeqNo == null) continue;
                        //if (CurrentSeqNo > NewSeqNo || CurrentSeqNo <= LastSeqNo) continue;

                        string OutString = "seq: " + CurrentSeqNo + ";  ";
                        string id = JsonMaker.GetIOSJsonExtract("$.id", SeqToken).ToString();
                        OutString += "id: " + id +";  ";
                        var ChangesArray = (IEnumerable<JToken>)JsonMaker.GetIOSJsonExtract("$.changes", SeqToken.ToString());
                        string rev = "";
                        if (ChangesArray != null)
                        {
                            rev = JsonMaker.GetIOSJsonExtract("$.rev", ChangesArray.First()).ToString();
                            OutString += "rev: " + rev + ";  ";
                        }
                        //OutString += System.Environment.NewLine;
                        //OutString = UrlRequest(base_url + "/" + id, "GET") + System.Environment.NewLine;
                        //Logger.LogActivity(OutString);
                        string deleted = (JsonMaker.GetIOSJsonExtract("$.deleted", SeqToken) ??"").ToString();
                      
                        if (deleted.ToLower() == "true")
                        {
                            OutString = "Skipped due to deletion: " + OutString;
                            Logger.LogActivity(OutString);
                        }
                        else if (!id.StartsWith("_design"))
                        {
                            Logger.LogActivity(OutString);
                            string status = ImportPcr(id, rev);
                            //if (status.ToLower().Contains("error")) 
                            Logger.LogActivity("CheckRevisions Breakpoint 1", "Breakpoints");
                            Logger.LogActivity("ImportPcr Response: " + status);
                        }
                        config.UpdateAppSettings("Settings", "Last Sequence", strSeq);
                    }
                }
                // NewSeqNo = JsonMaker.GetIOSJsonExtract("$.last_seq", Json2).ToString();
                string NewSeq = JsonMaker.GetIOSJsonExtract("$.last_seq", Json1).ToString();
                if (NewSeq == null)
                {
                    Logger.LogActivity("Last Sequence: " + NewSeq);
                    return NewSeq;
                }
                int NewSeqNo;
                int.TryParse(NewSeq.Split('-')[0], out NewSeqNo);
                //int.TryParse(JsonMaker.GetIOSJsonExtract("$.last_seq", Json1).ToString().Split('-')[0], out NewSeqNo);
                Logger.LogActivity("Last Sequence: " + NewSeqNo);
                return NewSeq;
                //Logger.LogAction(Json1, "CouchStatus");

            }
            catch (Exception ex) { Logger.LogException(ex);  return LastSeq; }
        }
        static string LastSeq = "";
        static void TimerHandler(object o, System.Timers.ElapsedEventArgs e)
        {
            //Logger.LogActivity("TimerHandler1","Test");
            //if (TimerActive) return;
            //Logger.LogActivity("TimerHandler2", "Test");
            //((System.Timers.Timer)o).Enabled = false;
            //TimerActive = true;
            //System.Windows.Forms.Application.DoEvents();
            System.Timers.Timer t = (System.Timers.Timer)o;
            Logger.LogActivity("TimerHandler enter", "Breakpoints");
            t.Enabled = false;
            string Seq = CheckRevisions(LastSeq);
            //Logger.LogActivity("TimerHandler3", "Test");
            config.UpdateAppSettings("Settings", "Last Sequence", Seq.ToString());
            LastSeq = Seq;
            t.Enabled = true;
            Logger.LogActivity("TimerHandler exit", "Breakpoints");
            //TimerActive = false;
           // ((System.Timers.Timer)o).Enabled = true;
        }
        static void CheckAllDocsTimerHandler(object o, System.Timers.ElapsedEventArgs e)
        {
            string CheckAllDocsURL = config.GetProfileEntry("Settings", "Check All Docs URL", "http://192.168.1.60:5984/app-pcr/_all_docs");

            try
            {
                string url = CheckAllDocsURL;
                string content;
                HttpResponseMessage response = UrlRequest(url, out content, "GET");
                //Task<string> content = GetContentfromResponse(response);
                string Json1 = content;



                var SeqArray = (IEnumerable<JToken>)JsonMaker.GetIOSJsonExtract("$.rows", Json1);
                if (SeqArray != null)
                {
                    foreach (JToken SeqToken in SeqArray)
                    {
                     
                        string id = JsonMaker.GetIOSJsonExtract("$.id", SeqToken).ToString();
                        string CouchUrl = config.GetProfileEntry("Settings", "CouchUrl", "http://192.168.1.60:5984/app-pcr/") + id;
                        string couch_content;
                        string response_string;
                        response = UrlRequest(CouchUrl, out couch_content, "GET");

                        if (response.StatusCode == HttpStatusCode.OK) {
                            string pcr_status = (JsonMaker.GetIOSJsonExtract("$.pcr_status", couch_content) ?? "").ToString();
                            string dateCreated = (JsonMaker.GetIOSJsonExtract("$.dateCreated", couch_content) ?? "").ToString();
                            if (pcr_status== "untouched" && DateTime.Parse(dateCreated).AddHours (2) >  DateTime.Now) {
                                    JsonMaker.UpdateJsonValue("$.pcr_status", "deleted", ref couch_content);
                                    UrlRequest(CouchUrl, out response_string, "PUT", data: couch_content);
                                    Logger.LogActivity(CouchUrl + " PUT Response: " + response_string);
                            }
                        }    
                   }
                }
                }
            catch (Exception ex) { Logger.LogException(ex); }
            }
                
        public static ConfigCls config = new ConfigCls("Settings.config");
        public WindowsService()
        {
            this.ServiceName = "Cems Mobile Pcr Service";
            this.EventLog.Source = "Cems Mobile Pcr Service";
            this.EventLog.Log = "Application";
            
            // These Flags set whether or not to handle that specific
            //  type of event. Set to true if you need it, false otherwise.
            this.CanHandlePowerEvent = true;
            this.CanHandleSessionChangeEvent = true;
            this.CanPauseAndContinue = true;
            this.CanShutdown = true;
            this.CanStop = true;

            if (!EventLog.SourceExists("Cems Mobile Pcr Service"))
                EventLog.CreateEventSource("Cems Mobile Pcr Service", "Application");
        }
        static void Init()
        {
            base_url = config.GetProfileEntry("Settings", "Database URL", "http://192.168.1.60:5984/app-pcr");
            string CheckAllDocsFrequency = config.GetProfileEntry("Settings", "Check All Docs Frequency In Minutes", "10");
            LastSeq = config.GetProfileEntry("Settings", "Last Sequence", "");
            Logger.LogActivity("Service Started");

            int LastSeqNo;
            int.TryParse(LastSeq.Split('-')[0], out LastSeqNo);
            int intFrequency;
            int.TryParse(CheckAllDocsFrequency, out intFrequency);

            Logger.LogActivity("Last Sequence: " + LastSeqNo);
            //TimerHandler(null, null);
            System.Timers.Timer timer = new System.Timers.Timer(60000);
            timer.Elapsed += new System.Timers.ElapsedEventHandler(TimerHandler);
            //timer.Elapsed += async (sender, e) => await HandleTimer();
            timer.Start();

            System.Timers.Timer CheckAllDocs_Timer = new System.Timers.Timer(intFrequency * 60000);
            CheckAllDocs_Timer.Elapsed += new System.Timers.ElapsedEventHandler(CheckAllDocsTimerHandler);
            //timer.Elapsed += async (sender, e) => await HandleTimer();
            CheckAllDocs_Timer.Start();

            //var timer = new System.Threading.Timer(
            //e => Timer(),
            //null,
            //TimeSpan.Zero,
            //TimeSpan.FromMinutes(1));
        }
        /// <summary>
        /// The Main Thread: This is where your Service is Run.
        /// </summary>
        static void Main()
        {
            Logger.LogActivity("Main" );
            try { 
            if (System.Environment.GetCommandLineArgs().Length > 1)
                if (System.Environment.GetCommandLineArgs()[1] == "debug")
                {
                    Init();
                    while (true)
                    {
                        System.Windows.Forms.Application.DoEvents();
                    }
                }
            Logger.LogActivity("Enter main");
            ServiceBase.Run(new WindowsService());
            Logger.LogActivity("Service ran");
            }
            catch (Exception ex) { Logger.LogException(ex); }
        }

        /// <summary>
        /// Dispose of objects that need it here.
        /// </summary>
        /// <param name="disposing">Whether or not disposing is going on.</param>
        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        /// <summary>
        /// OnStart: Put startup code here
        ///  - Start threads, get inital data, etc.
        /// </summary>
        /// <param name="args"></param>
        /// 
        bool serviceStarted = false;
        Thread WorkerThread;
        private void Worker()
        {
            Init();
        }
        protected override void OnStart(string[] args)
        {
            System.Diagnostics.Debugger.Launch();  
            this.EventLog.WriteEntry("OnStart");
            Logger.LogActivity("OnStart");
            ThreadStart start = new ThreadStart(Worker); // FaxWorker is where the work gets done
            WorkerThread = new Thread(start);

            // set flag to indicate worker thread is active
            serviceStarted = true;

            // start threads
            WorkerThread.Start();
            base.OnStart(args);
            //File.AppendAllText("c:\\CR_test.txt", "2");
            //Init();

        }

        /// <summary>
        /// OnStop: Put your stop code here
        /// - Stop threads, set final data, etc.
        /// </summary>
        protected override void OnStop()
        {
            serviceStarted = false;
            Logger.LogActivity("OnStop");
            // wait for threads to stop
            WorkerThread.Join(60);

            //try
            //{
            //    string error = "";
            //    System.Runtime.Remoting.Messaging.SMS.SendSMSTextAsync("5555555555", "Messaging Service stopped on " + System.Net.Dns.GetHostName(), ref error);
            //}
            //catch
            //{
            //    // yes eat exception if text failed
            //}
           // File.AppendAllText("c:\\CR_test.txt", "STOP");
            base.OnStop();
        }

        /// <summary>
        /// OnPause: Put your pause code here
        /// - Pause working threads, etc.
        /// </summary>
        protected override void OnPause()
        {
            base.OnPause();
        }

        /// <summary>
        /// OnContinue: Put your continue code here
        /// - Un-pause working threads, etc.
        /// </summary>
        protected override void OnContinue()
        {
            base.OnContinue();
        }

        /// <summary>
        /// OnShutdown(): Called when the System is shutting down
        /// - Put code here when you need special handling
        ///   of code that deals with a system shutdown, such
        ///   as saving special data before shutdown.
        /// </summary>
        protected override void OnShutdown()
        {
            base.OnShutdown();
        }

        /// <summary>
        /// OnCustomCommand(): If you need to send a command to your
        ///   service without the need for Remoting or Sockets, use
        ///   this method to do custom methods.
        /// </summary>
        /// <param name="command">Arbitrary Integer between 128 & 256</param>
        protected override void OnCustomCommand(int command)
        {
            //  A custom command can be sent to a service by using this method:
            //#  int command = 128; //Some Arbitrary number between 128 & 256
            //#  ServiceController sc = new ServiceController("NameOfService");
            //#  sc.ExecuteCommand(command);

            base.OnCustomCommand(command);
        }

        /// <summary>
        /// OnPowerEvent(): Useful for detecting power status changes,
        ///   such as going into Suspend mode or Low Battery for laptops.
        /// </summary>
        /// <param name="powerStatus">The Power Broadcase Status (BatteryLow, Suspend, etc.)</param>
        protected override bool OnPowerEvent(PowerBroadcastStatus powerStatus)
        {
            return base.OnPowerEvent(powerStatus);
        }

        /// <summary>
        /// OnSessionChange(): To handle a change event from a Terminal Server session.
        ///   Useful if you need to determine when a user logs in remotely or logs off,
        ///   or when someone logs into the console.
        /// </summary>
        /// <param name="changeDescription"></param>
        protected override void OnSessionChange(SessionChangeDescription changeDescription)
        {
            base.OnSessionChange(changeDescription);
        }
    }
}
