using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using MySql.Data.MySqlClient;
using System.Text;
using System.Configuration;
using System.Globalization;
using System.Reflection;
using System.Data;
using System.Net;
using System.IO;
using System.Diagnostics;
using System.Windows.Forms;
using Newtonsoft.Json.Linq;
using System.ServiceProcess;
using CemsMobilePcrSrv;
using System.Threading;

namespace CemsMobilePcrSrv
{
    class WindowsService : ServiceBase
    {
        static string base_url;
        static string post_from_couch_url;
        static bool TimerActive = false;
        public static string UrlRequest(string url, string method = "POST", string content_type = "application/json", string data=null)
        {
            try {
                HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(url);
                webRequest.Method = method;
                webRequest.ContentType = content_type;
                // Stream requestStream = webRequest.GetRequestStream();
                if (data != null)
                {
                    byte[] byteArray = Encoding.UTF8.GetBytes(data);
                    using (Stream dataStream = webRequest.GetRequestStream())
                    {
                        dataStream.Write(byteArray, 0, byteArray.Length);
                    }
                }
                System.Diagnostics.Stopwatch timer = new Stopwatch();
                timer.Start();
                WebResponse response = webRequest.GetResponse();
                timer.Stop();
                Logger.LogActivity(method + " elapsed time: " + timer.Elapsed, "CouchStatus");
                //webRequest.CookieContainer = cookieContainer;
                StreamReader reader = new StreamReader(response.GetResponseStream());
                return reader.ReadToEnd();
            }
            catch (WebException ex) { Logger.LogException(ex); return ex.Response.ResponseUri.ToString() + ":  " + ex.Message; }
            catch (Exception ex) { Logger.LogException(ex); return ex.Message; }
        }
         public static string ImportPcr(string id)
        {
            try
            {
                string url = config.GetProfileEntry("Settings", "CouchUrl", "http://192.168.1.60:5984/app-pcr/") + id;
                string response = UrlRequest(url, "GET");
                if (!response.ToLower().Contains("error"))
                {
                    url = config.GetProfileEntry("Settings", "PostFromCouchUrl", "http://creativeemstest.com/cemslocal/yiicems/index.php?r=api/CouchDB/PostPcrFromCouch");
                    return UrlRequest(url, "POST", data: response);
                }
                else
                    return response;
            }
            catch (WebException ex) { Logger.LogException(ex); return ex.Response.ResponseUri.ToString() + ":  " + ex.Message; }
            catch (Exception ex) { Logger.LogException(ex); return ex.Message; }
        }
        public static string ImportPcr_old(string id)
        {
            try
            {
                
                //string url = post_from_couch_url + "/_changes" + (LastSeq == "" ? "" : "?since=" + LastSeq);
                //        string Json1 = UrlRequest(post_from_couch_url,method:"POST", data:);
                string url = WindowsService.config.GetProfileEntry("Settings", "Web API URL", "http://localhost:85/api/Couch/");
                url += "ImportPcr?id=" + id;
                HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(url);
                webRequest.Method = "GET";

                System.Diagnostics.Stopwatch timer = new Stopwatch();
                timer.Start();
                WebResponse response = webRequest.GetResponse();
                timer.Stop();
                StreamReader reader = new StreamReader(response.GetResponseStream());
                string ResponseString = reader.ReadToEnd();
                Logger.LogActivity(url + ":" + System.Environment.NewLine + "GET elapsed time: " + timer.Elapsed + System.Environment.NewLine + response + ":" + ResponseString, "CouchStatus");
                return ResponseString;// ((HttpWebResponse)response).StatusDescription;

            }
            catch (WebException ex) { Logger.LogException(ex); return ex.Response.ResponseUri.ToString() + ":  " + ex.Message; }
            catch (Exception ex) { Logger.LogException(ex); return ex.Message; }
        }

        public static string CheckRevisions(string LastSeq)
        {
            try
            {
                string url = base_url + "/_changes" + (LastSeq == "" ? "" : "?since=" + LastSeq);
                string Json1 = UrlRequest(url,"GET");


                //url = base_url + "?since=" + NewSeqNo;
                //string Json2 = UrlRequest(url, "POST", "application/json");

                var SeqArray = (IEnumerable<JToken>)JsonMaker.GetIOSJsonExtract("$.results", Json1);
                if (SeqArray != null)
                {
                    foreach (JToken SeqToken in SeqArray)
                    {
                        int CurrentSeqNo;
                        int.TryParse(JsonMaker.GetIOSJsonExtract("$.seq", SeqToken).ToString().Split('-')[0], out CurrentSeqNo);
                        //if (CurrentSeqNo == null) continue;
                        //if (CurrentSeqNo > NewSeqNo || CurrentSeqNo <= LastSeqNo) continue;

                        string OutString = "seq: " + CurrentSeqNo + ";  ";
                        string id = JsonMaker.GetIOSJsonExtract("$.id", SeqToken).ToString();
                        OutString += "id: " + id +";  ";
                        var ChangesArray = (IEnumerable<JToken>)JsonMaker.GetIOSJsonExtract("$.changes", SeqToken.ToString());
                        if (ChangesArray != null)
                        {
                            string rev = JsonMaker.GetIOSJsonExtract("$.rev", ChangesArray.First()).ToString();
                            OutString += "rev: " + rev + ";  ";
                        }
                        //OutString += System.Environment.NewLine;
                        Logger.LogActivity(OutString);
                        //OutString = UrlRequest(base_url + "/" + id, "GET") + System.Environment.NewLine;
                        //Logger.LogActivity(OutString);

                        

                        string status=ImportPcr(id);
                        //if (status.ToLower().Contains("error")) 
                        Logger.LogActivity("ImportPcr Response: " + status);

                    }
                }
                // NewSeqNo = JsonMaker.GetIOSJsonExtract("$.last_seq", Json2).ToString();
                string NewSeq = JsonMaker.GetIOSJsonExtract("$.last_seq", Json1).ToString();
                if (NewSeq == null)
                {
                    Logger.LogActivity("Last Sequence: " + NewSeq);
                    return NewSeq;
                }
                int NewSeqNo;
                int.TryParse(NewSeq.Split('-')[0], out NewSeqNo);
                //int.TryParse(JsonMaker.GetIOSJsonExtract("$.last_seq", Json1).ToString().Split('-')[0], out NewSeqNo);
                Logger.LogActivity("Last Sequence: " + NewSeqNo);
                return NewSeq;
                //Logger.LogAction(Json1, "CouchStatus");

            }
            catch (Exception ex) { Logger.LogException(ex); return LastSeq; }
        }
        static string LastSeq = "";
        static void TimerHandler(object o, System.Timers.ElapsedEventArgs e)
        {
            Logger.LogActivity("TimerHandler1","Test");
            if (TimerActive) return;
            Logger.LogActivity("TimerHandler2", "Test");
            TimerActive = true;
            //System.Windows.Forms.Application.DoEvents();
            string Seq = CheckRevisions(LastSeq);
            Logger.LogActivity("TimerHandler3", "Test");
            config.UpdateAppSettings("Settings", "Last Sequence", Seq.ToString());
            LastSeq = Seq;
            TimerActive = false;
        }
        public static ConfigCls config = new ConfigCls("Settings.config");
        public WindowsService()
        {
            this.ServiceName = "Cems Mobile Pcr Service";
            this.EventLog.Source = "Cems Mobile Pcr Service";
            this.EventLog.Log = "Application";
            
            // These Flags set whether or not to handle that specific
            //  type of event. Set to true if you need it, false otherwise.
            this.CanHandlePowerEvent = true;
            this.CanHandleSessionChangeEvent = true;
            this.CanPauseAndContinue = true;
            this.CanShutdown = true;
            this.CanStop = true;

            if (!EventLog.SourceExists("Cems Mobile Pcr Service"))
                EventLog.CreateEventSource("Cems Mobile Pcr Service", "Application");
        }
        static void Init()
        {
            base_url = config.GetProfileEntry("Settings", "Database URL", "http://192.168.1.60:5984/app-pcr");
            
            LastSeq = config.GetProfileEntry("Settings", "Last Sequence", "");
            Logger.LogActivity("Service Started");

            int LastSeqNo;
            int.TryParse(LastSeq.Split('-')[0], out LastSeqNo);
            Logger.LogActivity("Last Sequence: " + LastSeqNo);

            System.Timers.Timer timer = new System.Timers.Timer(60000);
            timer.Elapsed += new System.Timers.ElapsedEventHandler(TimerHandler);
            //timer.Elapsed += async (sender, e) => await HandleTimer();
            timer.Start();

            //var timer = new System.Threading.Timer(
            //e => Timer(),
            //null,
            //TimeSpan.Zero,
            //TimeSpan.FromMinutes(1));
        }
        /// <summary>
        /// The Main Thread: This is where your Service is Run.
        /// </summary>
        static void Main()
        {
            Logger.LogActivity("Main" );
            try { 
            if (System.Environment.GetCommandLineArgs().Length > 1)
                if (System.Environment.GetCommandLineArgs()[1] == "debug")
                {
                    Init();
                    while (true)
                    {
                        System.Windows.Forms.Application.DoEvents();
                    }
                }
            Logger.LogActivity("Enter main");
            ServiceBase.Run(new WindowsService());
            Logger.LogActivity("Service ran");
            }
            catch (Exception ex) { Logger.LogException(ex); }
        }

        /// <summary>
        /// Dispose of objects that need it here.
        /// </summary>
        /// <param name="disposing">Whether or not disposing is going on.</param>
        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        /// <summary>
        /// OnStart: Put startup code here
        ///  - Start threads, get inital data, etc.
        /// </summary>
        /// <param name="args"></param>
        /// 
        bool serviceStarted = false;
        Thread WorkerThread;
        private void Worker()
        {
            Init();
        }
        protected override void OnStart(string[] args)
        {
            System.Diagnostics.Debugger.Launch();  
            this.EventLog.WriteEntry("OnStart");
            Logger.LogActivity("OnStart");
            ThreadStart start = new ThreadStart(Worker); // FaxWorker is where the work gets done
            WorkerThread = new Thread(start);

            // set flag to indicate worker thread is active
            serviceStarted = true;

            // start threads
            WorkerThread.Start();
            base.OnStart(args);
            //File.AppendAllText("c:\\CR_test.txt", "2");
            //Init();

        }

        /// <summary>
        /// OnStop: Put your stop code here
        /// - Stop threads, set final data, etc.
        /// </summary>
        protected override void OnStop()
        {
            serviceStarted = false;
            Logger.LogActivity("OnStop");
            // wait for threads to stop
            WorkerThread.Join(60);

            //try
            //{
            //    string error = "";
            //    System.Runtime.Remoting.Messaging.SMS.SendSMSTextAsync("5555555555", "Messaging Service stopped on " + System.Net.Dns.GetHostName(), ref error);
            //}
            //catch
            //{
            //    // yes eat exception if text failed
            //}
           // File.AppendAllText("c:\\CR_test.txt", "STOP");
            base.OnStop();
        }

        /// <summary>
        /// OnPause: Put your pause code here
        /// - Pause working threads, etc.
        /// </summary>
        protected override void OnPause()
        {
            base.OnPause();
        }

        /// <summary>
        /// OnContinue: Put your continue code here
        /// - Un-pause working threads, etc.
        /// </summary>
        protected override void OnContinue()
        {
            base.OnContinue();
        }

        /// <summary>
        /// OnShutdown(): Called when the System is shutting down
        /// - Put code here when you need special handling
        ///   of code that deals with a system shutdown, such
        ///   as saving special data before shutdown.
        /// </summary>
        protected override void OnShutdown()
        {
            base.OnShutdown();
        }

        /// <summary>
        /// OnCustomCommand(): If you need to send a command to your
        ///   service without the need for Remoting or Sockets, use
        ///   this method to do custom methods.
        /// </summary>
        /// <param name="command">Arbitrary Integer between 128 & 256</param>
        protected override void OnCustomCommand(int command)
        {
            //  A custom command can be sent to a service by using this method:
            //#  int command = 128; //Some Arbitrary number between 128 & 256
            //#  ServiceController sc = new ServiceController("NameOfService");
            //#  sc.ExecuteCommand(command);

            base.OnCustomCommand(command);
        }

        /// <summary>
        /// OnPowerEvent(): Useful for detecting power status changes,
        ///   such as going into Suspend mode or Low Battery for laptops.
        /// </summary>
        /// <param name="powerStatus">The Power Broadcase Status (BatteryLow, Suspend, etc.)</param>
        protected override bool OnPowerEvent(PowerBroadcastStatus powerStatus)
        {
            return base.OnPowerEvent(powerStatus);
        }

        /// <summary>
        /// OnSessionChange(): To handle a change event from a Terminal Server session.
        ///   Useful if you need to determine when a user logs in remotely or logs off,
        ///   or when someone logs into the console.
        /// </summary>
        /// <param name="changeDescription"></param>
        protected override void OnSessionChange(SessionChangeDescription changeDescription)
        {
            base.OnSessionChange(changeDescription);
        }
    }
}
